{"ast":null,"code":"var _jsxFileName = \"C:\\\\Wsio\\\\GitProjects\\\\weather-app\\\\src\\\\App.js\";\nimport React from 'react';\nimport Weather from './app_component/weather.component';\nimport Form from './app_component/form.component';\nimport './App.css';\nimport 'weather-icons/css/weather-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'; //api.openweathermap.org/data/2.5/weather?q=London\n\nconst API_key = 'e614a40be0d49993168759d8b8e25e37';\n\nclass App extends React.Component {\n  constructor() {\n    super(); //defining state to our app, then sending them to rendering section and to our app after seting needed data\n\n    this.handleInputChange = e => {\n      this.setState({\n        value: e.target.value\n      });\n    };\n\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: '',\n      error: false\n    };\n    this.getWeather(); //setting icons for our app.\n\n    this.weatherIcon = {\n      Thunderstorm: 'wi-thunderstorm',\n      Drizzle: 'wi-sleet',\n      Rain: 'wi-storm-shower',\n      Snow: 'wi-snow',\n      Atmosphere: 'wi-fog',\n      Clear: 'wi-day-sunny',\n      Clouds: 'wi-day-fog'\n    };\n  } //changing F to celsius.\n\n\n  calcCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  } //Specific parrameters to set corect icon for our app.\n  //nesting needed data to link for our app.\n\n\n  get_WeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId <= 232:\n        this.setState({\n          icon: this.weatherIcon.Thunderstorm\n        });\n        break;\n\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({\n          icon: this.weatherIcon.Drizzle\n        });\n        break;\n\n      case rangeId >= 500 && rangeId <= 531:\n        this.setState({\n          icon: this.weatherIcon.Rain\n        });\n        break;\n\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({\n          icon: this.weatherIcon.Snow\n        });\n        break;\n\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({\n          icon: this.weatherIcon.Atmosphere\n        });\n        break;\n\n      case rangeId === 800:\n        this.setState({\n          icon: this.weatherIcon.Clear\n        });\n        break;\n\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({\n          icon: this.weatherIcon.Clouds\n        });\n        break;\n\n      default:\n        this.setState({\n          icon: this.weatherIcon.Clouds\n        });\n    }\n  }\n\n  // getWeather = async e => {\n  //   e.preventDefault();\n  //   const city = e.target.elements.city.value;\n  //   const country = e.target.elements.country.value;\n  //   if (city && country) {\n  //     const api_call = await fetch(\n  //       `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`\n  //     );\n  //     // Waiting fo response from serv , setting properties to our data from feedback.\n  //     const response = await api_call.json();\n  //     console.log(response);\n  //     this.setState({\n  //       city: `${response.name}, ${response.sys.country}`,\n  //       celsius: this.calcCelsius(response.main.temp),\n  //       temp_max: this.calcCelsius(response.main.temp_max),\n  //       temp_min: this.calcCelsius(response.main.temp_min),\n  //       description: response.weather[0].main\n  //     });\n  //     this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n  //   } else {\n  //     this.setState.error = 'true';\n  //   }\n  // };\n  //Rendering properties from weather and reforming them using the data from serv then setting to our app.\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(Form, {\n      loadweather: this.getWeather,\n      error: this.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(Weather, {\n      city: this.state.city,\n      country: this.state.country,\n      temp_celsius: this.state.celsius,\n      temp_max: this.state.temp_max,\n      temp_min: this.state.temp_min,\n      description: this.state.description,\n      weatherIcon: this.state.icon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Wsio/GitProjects/weather-app/src/App.js"],"names":["React","Weather","Form","API_key","App","Component","constructor","handleInputChange","e","setState","value","target","state","city","undefined","country","icon","main","celsius","temp_max","temp_min","description","error","getWeather","weatherIcon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","calcCelsius","temp","cell","Math","floor","get_WeatherIcon","icons","rangeId","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Weather from './app_component/weather.component';\nimport Form from './app_component/form.component';\nimport './App.css';\n\nimport 'weather-icons/css/weather-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n//api.openweathermap.org/data/2.5/weather?q=London\nconst API_key = 'e614a40be0d49993168759d8b8e25e37';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    //defining state to our app, then sending them to rendering section and to our app after seting needed data\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: '',\n      error: false\n    };\n    this.getWeather();\n    //setting icons for our app.\n    this.weatherIcon = {\n      Thunderstorm: 'wi-thunderstorm',\n      Drizzle: 'wi-sleet',\n      Rain: 'wi-storm-shower',\n      Snow: 'wi-snow',\n      Atmosphere: 'wi-fog',\n      Clear: 'wi-day-sunny',\n      Clouds: 'wi-day-fog'\n    };\n  }\n  //changing F to celsius.\n  calcCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n  //Specific parrameters to set corect icon for our app.\n\n  //nesting needed data to link for our app.\n  get_WeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId <= 232:\n        this.setState({ icon: this.weatherIcon.Thunderstorm });\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon: this.weatherIcon.Drizzle });\n        break;\n      case rangeId >= 500 && rangeId <= 531:\n        this.setState({ icon: this.weatherIcon.Rain });\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon: this.weatherIcon.Snow });\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon: this.weatherIcon.Atmosphere });\n        break;\n      case rangeId === 800:\n        this.setState({ icon: this.weatherIcon.Clear });\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({ icon: this.weatherIcon.Clouds });\n        break;\n      default:\n        this.setState({ icon: this.weatherIcon.Clouds });\n    }\n  }\n\n  handleInputChange = e => {\n    this.setState({\n      value: e.target.value\n    });\n  };\n\n  // getWeather = async e => {\n  //   e.preventDefault();\n\n  //   const city = e.target.elements.city.value;\n  //   const country = e.target.elements.country.value;\n  //   if (city && country) {\n  //     const api_call = await fetch(\n  //       `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`\n  //     );\n  //     // Waiting fo response from serv , setting properties to our data from feedback.\n  //     const response = await api_call.json();\n  //     console.log(response);\n  //     this.setState({\n  //       city: `${response.name}, ${response.sys.country}`,\n  //       celsius: this.calcCelsius(response.main.temp),\n  //       temp_max: this.calcCelsius(response.main.temp_max),\n  //       temp_min: this.calcCelsius(response.main.temp_min),\n  //       description: response.weather[0].main\n  //     });\n  //     this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n  //   } else {\n  //     this.setState.error = 'true';\n  //   }\n  // };\n\n  //Rendering properties from weather and reforming them using the data from serv then setting to our app.\n  render() {\n    return (\n      <div className='App'>\n        <Form loadweather={this.getWeather} error={this.error} />\n        <Weather\n          city={this.state.city}\n          country={this.state.country}\n          temp_celsius={this.state.celsius}\n          temp_max={this.state.temp_max}\n          temp_min={this.state.temp_min}\n          description={this.state.description}\n          weatherIcon={this.state.icon}\n        />\n      </div>\n    );\n  }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}