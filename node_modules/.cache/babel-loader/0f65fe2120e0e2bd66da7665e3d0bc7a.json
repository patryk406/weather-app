{"ast":null,"code":"var _jsxFileName = \"C:\\\\Wsio\\\\GitProjects\\\\weather-app\\\\src\\\\App.js\";\nimport React from 'react';\nimport Weather from './app_component/weather.component';\nimport Form from './app_component/form.component';\nimport './App.css';\nimport 'weather-icons/css/weather-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'; //api.openweathermap.org/data/2.5/weather?q=London\n\nconst API_key = 'e614a40be0d49993168759d8b8e25e37';\n\nclass App extends React.Component {\n  constructor() {\n    super(); //defining state to our app, then sending them to rendering section and to our app after seting needed data\n\n    this.getWeather = async e => {\n      e.preventDefault();\n      const city = e.target.elements.city.value;\n      const caountry = e.target.elements.country.value;\n      const api_call = await fetch(\"http://api.openweathermap.org/data/2.5/weather?q=warsaw,pl&appid=\".concat(API_key)); // Waiting fo response from serv , setting properties to our data from feedback.\n\n      const response = await api_call.json();\n      console.log(response);\n      this.setState({\n        city: response.name,\n        country: response.sys.country,\n        celsius: this.calcCelsius(response.main.temp),\n        temp_max: this.calcCelsius(response.main.temp_max),\n        temp_min: this.calcCelsius(response.main.temp_min),\n        description: response.weather[0].main\n      });\n      this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n    };\n\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: '',\n      error: false\n    };\n    this.getWeather(); //setting icons for our app.\n\n    this.weatherIcon = {\n      Thunderstorm: 'wi-thunderstorm',\n      Drizzle: 'wi-sleet',\n      Rain: 'wi-storm-shower',\n      Snow: 'wi-snow',\n      Atmosphere: 'wi-fog',\n      Clear: 'wi-day-sunny',\n      Clouds: 'wi-day-fog'\n    };\n  } //changing F to celsius.\n\n\n  calcCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  } //Specific parrameters to set corect icon for our app.\n  //nesting needed data to link for our app.\n\n\n  get_WeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId <= 232:\n        this.setState({\n          icon: this.weatherIcon.Thunderstorm\n        });\n        break;\n\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({\n          icon: this.weatherIcon.Drizzle\n        });\n        break;\n\n      case rangeId >= 500 && rangeId <= 531:\n        this.setState({\n          icon: this.weatherIcon.Rain\n        });\n        break;\n\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({\n          icon: this.weatherIcon.Snow\n        });\n        break;\n\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({\n          icon: this.weatherIcon.Atmosphere\n        });\n        break;\n\n      case rangeId === 800:\n        this.setState({\n          icon: this.weatherIcon.Clear\n        });\n        break;\n\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({\n          icon: this.weatherIcon.Clouds\n        });\n        break;\n\n      default:\n        this.setState({\n          icon: this.weatherIcon.Clouds\n        });\n    }\n  }\n\n  //Rendering properties from weather and reforming them using the data from serv then setting to our app.\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(Form, {\n      loadweather: this.getWeather,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(Weather, {\n      city: this.state.city,\n      country: this.state.country,\n      temp_celsius: this.state.celsius,\n      temp_max: this.state.temp_max,\n      temp_min: this.state.temp_min,\n      description: this.state.description,\n      weatherIcon: this.state.icon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Wsio/GitProjects/weather-app/src/App.js"],"names":["React","Weather","Form","API_key","App","Component","constructor","getWeather","e","preventDefault","city","target","elements","value","caountry","country","api_call","fetch","response","json","console","log","setState","name","sys","celsius","calcCelsius","main","temp","temp_max","temp_min","description","weather","get_WeatherIcon","weatherIcon","id","state","undefined","icon","error","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","cell","Math","floor","icons","rangeId","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Weather from './app_component/weather.component';\nimport Form from './app_component/form.component';\nimport './App.css';\n\nimport 'weather-icons/css/weather-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n//api.openweathermap.org/data/2.5/weather?q=London\nconst API_key = 'e614a40be0d49993168759d8b8e25e37';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    //defining state to our app, then sending them to rendering section and to our app after seting needed data\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: '',\n      error: false\n    };\n    this.getWeather();\n    //setting icons for our app.\n    this.weatherIcon = {\n      Thunderstorm: 'wi-thunderstorm',\n      Drizzle: 'wi-sleet',\n      Rain: 'wi-storm-shower',\n      Snow: 'wi-snow',\n      Atmosphere: 'wi-fog',\n      Clear: 'wi-day-sunny',\n      Clouds: 'wi-day-fog'\n    };\n  }\n  //changing F to celsius.\n  calcCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n  //Specific parrameters to set corect icon for our app.\n\n  //nesting needed data to link for our app.\n  get_WeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId <= 232:\n        this.setState({ icon: this.weatherIcon.Thunderstorm });\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon: this.weatherIcon.Drizzle });\n        break;\n      case rangeId >= 500 && rangeId <= 531:\n        this.setState({ icon: this.weatherIcon.Rain });\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon: this.weatherIcon.Snow });\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon: this.weatherIcon.Atmosphere });\n        break;\n      case rangeId === 800:\n        this.setState({ icon: this.weatherIcon.Clear });\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({ icon: this.weatherIcon.Clouds });\n        break;\n      default:\n        this.setState({ icon: this.weatherIcon.Clouds });\n    }\n  }\n  getWeather = async e => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const caountry = e.target.elements.country.value;\n    const api_call = await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=warsaw,pl&appid=${API_key}`\n    );\n    // Waiting fo response from serv , setting properties to our data from feedback.\n    const response = await api_call.json();\n    console.log(response);\n    this.setState({\n      city: response.name,\n      country: response.sys.country,\n      celsius: this.calcCelsius(response.main.temp),\n      temp_max: this.calcCelsius(response.main.temp_max),\n      temp_min: this.calcCelsius(response.main.temp_min),\n      description: response.weather[0].main\n    });\n    this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n  };\n\n  //Rendering properties from weather and reforming them using the data from serv then setting to our app.\n  render() {\n    return (\n      <div className='App'>\n        <Form loadweather={this.getWeather} />\n        <Weather\n          city={this.state.city}\n          country={this.state.country}\n          temp_celsius={this.state.celsius}\n          temp_max={this.state.temp_max}\n          temp_min={this.state.temp_min}\n          description={this.state.description}\n          weatherIcon={this.state.icon}\n        />\n      </div>\n    );\n  }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}