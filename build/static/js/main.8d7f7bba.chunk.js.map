{"version":3,"sources":["app_component/weather.component.jsx","app_component/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","weatherIcon","temp_celsius","max","min","minmaxTemp","temp_max","temp_min","description","Form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","required","API_key","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calcCelsius","main","temp","weather","get_WeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeId","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8d7f7bba.chunk.js","sourcesContent":["import React from 'react';\r\nconst Weather = props => {\r\n  return (\r\n    <div className='container'>\r\n      <div className='cards pt-4'>\r\n        <h1>{props.city}</h1>\r\n        <h5 className='py-4'>\r\n          <i className={`wi ${props.weatherIcon} display-1`}></i>\r\n        </h5>\r\n\r\n        {props.temp_celsius ? (\r\n          <h1 className='py-2'>Actual Temp {props.temp_celsius}&deg;</h1>\r\n        ) : null}\r\n        {/* {show max and min temp} */}\r\n        {minmaxTemp(props.temp_max, props.temp_min)}\r\n\r\n        <h4 className='py-3'>{props.description}</h4>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction minmaxTemp(max, min) {\r\n  if (min && max) {\r\n    return (\r\n      <h3>\r\n        <span className='px-4'>Min Temperature {min}&deg;</span>\r\n        <span className='px-4'>Max Temperature {max}&deg;</span>\r\n      </h3>\r\n    );\r\n  }\r\n}\r\nexport default Weather;\r\n","import React from 'react';\r\nimport './form.style.css';\r\n\r\nconst Form = props => {\r\n  return (\r\n    <div className='container'>\r\n      <div>{props.error ? error() : null}</div>\r\n      <form onSubmit={props.loadweather}>\r\n        <div className='row'>\r\n          <div className='col-md-3 offset-md-2'>\r\n            <input\r\n              type='text'\r\n              className='form-control'\r\n              name='city'\r\n              autoComplete='off'\r\n              placeholder='City'\r\n              required\r\n            />\r\n          </div>\r\n          <div className='col-md-3'>\r\n            <input\r\n              type='text'\r\n              className='form-control'\r\n              name='country'\r\n              autoComplete='off'\r\n              placeholder='Country'\r\n              required\r\n            />\r\n          </div>\r\n          <div className='col-md-3 mt-md-0 text-md-left py-2'>\r\n            <button className='btn btn-warning'>Get Weather</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction error() {\r\n  return (\r\n    <div className='alert alert-danger mx-5' role='alert'>\r\n      Please Enter City and Country{' '}\r\n    </div>\r\n  );\r\n}\r\nexport default Form;\r\n","import React from 'react';\nimport Weather from './app_component/weather.component';\nimport Form from './app_component/form.component';\nimport './App.css';\n\nimport 'weather-icons/css/weather-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n//api.openweathermap.org/data/2.5/weather?q=London\nconst API_key = 'e614a40be0d49993168759d8b8e25e37';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    //defining state to our app, then sending them to rendering section and to our app after seting needed data\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: '',\n      error: false\n    };\n    //setting icons for our app.\n    this.weatherIcon = {\n      Thunderstorm: 'wi-thunderstorm',\n      Drizzle: 'wi-sleet',\n      Rain: 'wi-storm-shower',\n      Snow: 'wi-snow',\n      Atmosphere: 'wi-fog',\n      Clear: 'wi-day-sunny',\n      Clouds: 'wi-day-fog'\n    };\n  }\n  //changing F to celsius.\n  calcCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n  //Specific parrameters to set corect icon for our app.\n\n  //nesting needed data to link for our app.\n  get_WeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId <= 232:\n        this.setState({ icon: this.weatherIcon.Thunderstorm });\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon: this.weatherIcon.Drizzle });\n        break;\n      case rangeId >= 500 && rangeId <= 531:\n        this.setState({ icon: this.weatherIcon.Rain });\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon: this.weatherIcon.Snow });\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon: this.weatherIcon.Atmosphere });\n        break;\n      case rangeId === 800:\n        this.setState({ icon: this.weatherIcon.Clear });\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({ icon: this.weatherIcon.Clouds });\n        break;\n      default:\n        this.setState({ icon: this.weatherIcon.Clouds });\n    }\n  }\n  getWeather = async e => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    if (city && country) {\n      const api_call = await fetch(\n        `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`\n      );\n      // Waiting fo response from serv , setting properties to our data from feedback.\n      const response = await api_call.json();\n      console.log(response);\n      this.setState({\n        city: `${response.name}, ${response.sys.country}`,\n        celsius: this.calcCelsius(response.main.temp),\n        temp_max: this.calcCelsius(response.main.temp_max),\n        temp_min: this.calcCelsius(response.main.temp_min),\n        description: response.weather[0].main\n      });\n      this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n    } else {\n      this.setState.error = 'true';\n    }\n  };\n\n  //Rendering properties from weather and reforming them using the data from serv then setting to our app.\n  render() {\n    return (\n      <div className='App'>\n        <Form loadweather={this.getWeather} error={this.error} />\n        <Weather\n          city={this.state.city}\n          country={this.state.country}\n          temp_celsius={this.state.celsius}\n          temp_max={this.state.temp_max}\n          temp_min={this.state.temp_min}\n          description={this.state.description}\n          weatherIcon={this.state.icon}\n        />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}